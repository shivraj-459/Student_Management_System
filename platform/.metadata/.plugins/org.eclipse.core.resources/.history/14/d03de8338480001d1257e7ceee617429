package com.commons.exception;

import java.time.LocalDateTime;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

@ControllerAdvice
public class GlobalExceptionHandler {

	
	@ExceptionHandler(StudentException.class)
	public ResponseEntity<MyErrorController> studentExceptionHandler(StudentException se,WebRequest req){
		
		
		MyErrorController errorController=new MyErrorController();
		
		errorController.setTimeStamp(LocalDateTime.now());
		errorController.setMessage(se.getMessage());
		errorController.setDescription(req.getDescription(false));
		
		return new ResponseEntity<MyErrorController>(errorController,HttpStatus.NOT_FOUND);
		
	}
	
	@ExceptionHandler(LoginException.class)
	public ResponseEntity<MyErrorController> loginExceptionHandler(LoginException le,WebRequest req){
		
		
		MyErrorController errorController=new MyErrorController();
		
		errorController.setTimeStamp(LocalDateTime.now());
		errorController.setMessage(le.getMessage());
		errorController.setDescription(req.getDescription(false));
		
		return new ResponseEntity<MyErrorController>(errorController,HttpStatus.UNAUTHORIZED);
		
	}
	
	
	@ExceptionHandler(ValidationException.class)
	public ResponseEntity<MyErrorController> validationExceptionHandler(ValidationException ve,WebRequest req){
		
		
		MyErrorController errorController=new MyErrorController();
		
		errorController.setTimeStamp(LocalDateTime.now());
		errorController.setMessage(ve.getMessage());
		errorController.setDescription(req.getDescription(false));
		
		return new ResponseEntity<MyErrorController>(errorController,HttpStatus.BAD_REQUEST);
		
	}
	
	
	@ExceptionHandler(AdminException.class)
	public ResponseEntity<MyErrorController> adminExceptionHandler(AdminException ae,WebRequest req){
		
		
		MyErrorController errorController=new MyErrorController();
		
		errorController.setTimeStamp(LocalDateTime.now());
		errorController.setMessage(ae.getMessage());
		errorController.setDescription(req.getDescription(false));
		
		return new ResponseEntity<MyErrorController>(errorController,HttpStatus.BAD_REQUEST);
		
	}
	
	
	
	
	@ExceptionHandler(Exception.class)
	public ResponseEntity<MyErrorController> otherExceptionHandler(Exception e,WebRequest req){
		
		
		MyErrorController errorController=new MyErrorController();
		
		errorController.setTimeStamp(LocalDateTime.now());
		errorController.setMessage(e.getMessage());
		errorController.setDescription(req.getDescription(false));
		
		return new ResponseEntity<MyErrorController>(errorController,HttpStatus.BAD_REQUEST);
		
	}
	
	
}
